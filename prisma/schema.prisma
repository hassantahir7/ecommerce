// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String  @id @default(uuid())
  profilePic    String? @default("dummy")
  name          String
  email         String  @unique
  password      String
  contactNumber String? @unique // made optional after UI
  dateOfBirth   String?
  address       Address[]
  subscription  Boolean @default(false)

  is_emailVerified         Boolean @default(false)
  is_contactNumberVerified Boolean @default(false)

  is_Active  Boolean    @default(true)
  is_Deleted Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Cart       Cart[]
  Order      Order[]
  Wishlist   Wishlist[]
}

model Address{
  addressId        String  @id @default(uuid())
  userId           String
  user             User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  firstName        String?
  lastName         String?
  contactNumber    String?
  type             AddressType
  address          String
  city             String
  area             String
  apartment        String
  order            Order[]
  is_Active  Boolean    @default(true)
  is_Deleted Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([userId, type], name: "unique_address_type_per_user")
}

model VerifyUser {
  id                String   @id @default(uuid())
  email             String   @unique
  otp               String
  verificationTries Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  is_Active  Boolean @default(true)
  is_Deleted Boolean @default(false)

  @@map(name: "verifyUser")
}

model Product {
  productId       String           @id @default(uuid())
  name            String
  description     String?
  categoryId      String
  basePrice       Float?
  category        Categories       @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  productType     ProductType      @default(CLOTHES)
  composition     String?
  limitedAddition Boolean          @default(false)
  weight          String?
  Variants        ProductVariant[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  is_Active       Boolean          @default(true)
  is_Deleted      Boolean          @default(false)
  Wishlist        Wishlist[]
}

model Wishlist {
  wishlistId String  @id @default(uuid())
  productId  String
  userId     String
  product    Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model ProductVariant {
  variantId  String      @id @default(uuid())
  productId  String
  product    Product     @relation(fields: [productId], references: [productId], onDelete: Cascade)
  color      String
  attachment String
  isDuotone  Boolean     @default(false)
  size       String
  style      String?
  stock      Int         @default(0)
  price      Float?
  isInStock  Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  is_Active  Boolean     @default(true)
  is_Deleted Boolean     @default(false)
  CartItem   CartItem[]
  OrderItem  OrderItem[]
}

model Cart {
  cartId     String     @id @default(uuid())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [userId])
  CartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  is_Active  Boolean    @default(true)
  is_Deleted Boolean    @default(false)
}

model CartItem {
  cartItemId String         @id @default(uuid())
  cartId     String
  cart       Cart           @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  variantId  String
  variant    ProductVariant @relation(fields: [variantId], references: [variantId])
  quantity   Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  is_Active  Boolean        @default(true)
  is_Deleted Boolean        @default(false)
}

model Categories {
  categoryId String    @id @default(uuid())
  name       String
  attachment String?
  gender     Gender
  is_Active  Boolean   @default(true)
  is_Deleted Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Product    Product[]
}

model Order {
  orderId       String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [userId])
  addressId     String        
  address       Address       @relation(fields: [addressId], references: [addressId])
  contactNumber String
  quantity      Int
  discount      Float         @default(0.0)
  total         Float
  subtotal      Float
  paymentMethod PaymentMethod
  status        OrderStatus   @default(PENDING)
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  is_Active     Boolean       @default(true)
  is_Deleted    Boolean       @default(false)
  Payment       Payment[]
}

model discount {
  discountId       String        @id @default(uuid())
  promoCode        String
  percentage       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  is_Active     Boolean       @default(true)
  is_Deleted    Boolean       @default(false)
}

model OrderItem {
  orderItemId String         @id @default(uuid())
  orderId     String
  order       Order          @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  variantId   String
  variant     ProductVariant @relation(fields: [variantId], references: [variantId])
  quantity    Int
  price       Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  is_Active   Boolean        @default(true)
  is_Deleted  Boolean        @default(false)
}

model Payment {
  paymentId     String   @id @default(uuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [orderId])
  paymentIntent String
  amount        Float
  currency      String
  status        String
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DISPATCHED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
}

enum Gender {
  MEN
  WOMEN
  UNISEX
  OTHER
}

enum ProductType {
  CLOTHES
  FOOD
  JEWELRY
  OTHER
}


enum AddressType {
  PRIMARY
  SECONDARY
}

enum PackagingType {
  PREMIUM
  ECO_FRIENDLY
}
